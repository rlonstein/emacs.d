#! /bin/sh
# e --- editor companion script for mw-screen-server.el
# Copyright (C) 2003  Michael Weber <michaelw@foldr.org>

# Author:	Michael Weber <michaelw@foldr.org>
# Time-stamp:	<2003-02-24 10:49:12 michaelw>

# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
set -e 

# environment variables: 
#   * MW_SCREEN_SERVER: if 'X', start X version of Emacs server, if
#     not already running, and possible. (default: 'screen')
#     Hint: 'X' works nicely with ion and `gnuserv-frame' set to nil.
#
#   * MW_SCREEN_SERVER_EDITOR: fallback editor to use, if no contact
#     to any Emacs server could be established. (default: '$emacs')


# client program (emacsclient does NOT work b/c missing '-eval' feature)
client=gnuclient
# when starting new emacs inside a screen
emacs="emacs -nw"
# amount of time in seconds to wait for a server response
max_wait=10
# name of the screen window Emacs lives in
emacs_window_name="emacs"
# number of the screen window (just a hint, screen ignores it, if
# window) already exists
emacs_window="0"
# session name if starting a new screen becomes necessary
emacs_session="emacs"


#############################################################################

prog="$(basename "$0")"

emacs_window_sys=""
connect ()
{
    local wait="${1:-${max_wait}}"
    printf "$prog: trying to connect to Emacs server... " >&2
    for i in $(seq ${wait}); do
        if emacs_window_sys="$(${client} -batch -eval \
           "(mw-screen-server-window-set ${WINDOW:-nil} ${STY+\"${STY}\"})" 2>/dev/null)"
	then
    	    i="connect"; break
        fi
    	printf "$i "
    	sleep 1
    done
    if [ "$i" = "connect" ]; then 
    	echo "succeeded." >&2
	return 0
    else
    	echo "FAILED." >&2
    fi
    return 1
}

start_slave_edit ()
{
    ${client} ${1+"$@"}
    if [ -n "$WINDOW" ]; then
	screen -X select ${WINDOW}
	exec screen -X redisplay
	return
    fi
    exit 0
}

switch_to_emacs_in_screen ()
{
    local emacs_sty="$1"
    shift
    case "$STY" in
    	("$emacs_sty")	# yesh!@  We're inside the same screen!
    	    start_slave_edit ${1+"$@"}
    	    ;;
    	('') # outside of screen, but we know how to get the right one
	    ${client} ${1+"$@"} &
    	    screen -x "$emacs_sty"
	    wait
	    exit 0
    	    ;;
    	(*)  # current screen != Emacs screen
    	    echo "$prog: Emacs server lives in screen ${emacs_sty}.  Switch manually." >&2
    	    start_slave_edit ${1+"$@"}
    	    ;;
    esac
}

start_emacs_server_in_screen ()
{
    if [ -z "$STY" ]; then
    	echo "$prog: starting new screen (which hopefully contains a usable Emacs server)..." >&2
    	screen -dmS ${emacs_session}
    else # already inside a screen
    	echo "$prog: starting new Emacs server..." >&2
    	screen -t ${emacs_window_name} ${emacs_window} ${emacs}
    fi
    connect
    return $?
}

start_emacs_server_in_X ()
{
    emacs &
    connect
    return $?
}


# main
start_server=start_emacs_server_in_screen
if [ -n "$DISPLAY" ] && [ "${MW_SCREEN_SERVER}" = "X" ]; then
    start_server=start_emacs_server_in_X
fi

if connect 1 || $start_server; then
    case "$emacs_window_sys" in
	(tty=?*) # Emacs on a TTY and inside a screen
	    switch_to_emacs_in_screen "${emacs_window_sys#tty=}" ${1+"$@"}
	    ;;
	(tty=)   # Emacs on a TTY, but not inside a screen => out of luck
            echo "$prog: Emacs server outside of screen.  Switch manually." >&2
	    start_slave_edit ${1+"$@"}
	    ;;
	(x)      # X
	    echo "$prog: connecting edit session to Emacs server on X..."
            start_slave_edit ${1+"$@"}
	    ;;
	('')     # (still?) no Emacs server running
	    ;;
	(*)      # huh?
            echo "unknown window-system: '${emacs_window_sys}'"
	    pause
	    return 1
	    ;;
    esac
fi

echo "$prog: unable to talk to Emacs server.  Using fallback editor..." >&2
exec ${MW_SCREEN_SERVER_EDITOR:-${emacs}} ${1+"$@"}
exit 1
